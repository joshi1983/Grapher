unit MainU;
{ main unit
  contains code to:
                   - control the way the model is viewed
                   - graph information from the points array into the model under the timer
                   - display the model
}
interface

uses
  Windows, Messages, SysUtils, Classes, Graphics, Controls, Forms, Dialogs,
  StdCtrls, ExtCtrls,mymath,mygraphics, jpeg;

type
  TForm1 = class(TForm)
    ScrollBar1: TScrollBar;
    Label1: TLabel;
    ScrollBar2: TScrollBar;
    ScrollBar3: TScrollBar;
    Button1: TButton;
    Timer1: TTimer;
    CheckBox1: TCheckBox;
    RadioGroup1: TRadioGroup;
    Image1: TImage;
    procedure FormPaint(Sender: TObject);
    procedure ScrollBar2Change(Sender: TObject);
    procedure ScrollBar1Change(Sender: TObject);
    procedure ScrollBar3Change(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Timer1Timer(Sender: TObject);
    procedure CheckBox1Click(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure FormResize(Sender: TObject);
    procedure RadioGroup1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;
  Triangle = record
     p1,p2,p3: tpoint3d;
  end;
  TLine = record
      p1,p2: tpoint3d; // coordinates of the 2 points on the ends of the line segment
  end;
  procedure Addline(ln1: TLine);

const
     width1 =20;
     height1 =20;
     time1 = 20;
     // dimensions of the graph
     
var
  Form1: TForm1;
   lines: array of TLine; // all the lines in a 3D wireframe model
   triangles: array of Triangle;
   mv: integer; // the vertical middle
   mh: integer; // the horizontal middle
   h,v: real; // the angles
   cosh,sinh,cosv,sinv: real;
   // precalculated trig values for xyztox and xyztoy functions
   v1: vector3d;
   sz: real; // magnification
   t: integer; // time = -time1 .. time1
   bit1: tbitmap;
   scan: tscanlines;

implementation

uses CodeEditoru;

{$R *.DFM}
function xyztox(x,y,z: real): integer;
begin
     result:=mh+round((x*cosh+z*sinh)*sz);
end;

function xyztoy(x,y,z: real): integer;
begin
     result:=mv+round(sz*(y*cosv+(-x*sinh+z*cosh)*sinv));
end;

function xyzto2Dpoint(p: tpoint3d): tpoint;
begin
     result:=point(mh+round((p.x*cosh+p.z*sinh)*sz),mv+round(sz*(p.y*cosv+(-p.x*sinh+p.z*cosh)*sinv)));
end;
{ the above 2 functions were created with math related to the projection of a point in space onto a 2D graph.
It is quite difficult to explain the math but I have created a program to help illustrate how the math works.

If you want to get this illustration program or have any specific questions, contact me about it.
}

procedure UpdateDisplay;
var
  x: integer;
  top1: integer;
begin
     bit1.canvas.fillrect(form1.clientrect); // clear the view
     bit1.canvas.draw((bit1.width-form1.image1.width) shr 1,0,form1.image1.picture.graphic);
     top1:=form1.scrollbar1.top+form1.scrollbar1.height;
     // start by updating the settings for drawing the display
     mv:=bit1.height shr 1; // same as div 2
     mh:=form1.clientwidth shr 1;
     cosh:=cos(h);
     sinh:=sin(h);
     cosv:=cos(v);
     sinv:=sin(v);
     v1:=getlineofsiteVector(1,v,h);
     // settings now updated
     // now the dimensions of the bitmap are updated
     if (form1.radiogroup1.itemindex=0)or(form1.radiogroup1.itemindex=2) then
     for x:=high(lines) downto 0 do
     with bit1.canvas do
     begin
          moveto(xyztox(lines[x].p1.x,lines[x].p1.y,lines[x].p1.z),xyztoy(lines[x].p1.x,lines[x].p1.y,lines[x].p1.z));
          lineto(xyztox(lines[x].p2.x,lines[x].p2.y,lines[x].p2.z),xyztoy(lines[x].p2.x,lines[x].p2.y,lines[x].p2.z));
     end;
     if form1.radiogroup1.itemindex>0 then
     for x:=high(triangles) downto 0 do
     with triangles[x] do
         MyGraphics.Alpha_Triangle(xyzto2Dpoint(p1),xyzto2Dpoint(p2),xyzto2Dpoint(p3),0,255,100,
         round(200*getOpaque2PlaneDir(p1,p2,p3,v1)),scan);
     form1.canvas.draw(0,top1,bit1); // draw the bitmap on the form to show the user the update
end;

procedure Addline(ln1: TLine);
begin // add a line to the model
     SetLength(lines,high(lines)+2);
     lines[high(lines)]:=ln1;
end;
procedure AddTriangle(tri: Triangle);
begin
     SetLength(triangles,high(triangles)+2);
     triangles[high(triangles)]:=tri;
end;

procedure TForm1.FormPaint(Sender: TObject);
begin
     updatedisplay;
end;

procedure TForm1.ScrollBar2Change(Sender: TObject);
begin
     v:=scrollbar2.position*pi/180;
     updatedisplay;
end;

procedure TForm1.ScrollBar1Change(Sender: TObject);
begin
     h:=scrollbar1.position*pi/180;
     updatedisplay;
end;

procedure TForm1.ScrollBar3Change(Sender: TObject);
begin
     sz:=scrollbar3.position/10;
     updatedisplay;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
     sz:=scrollbar3.position/10;
     h:=scrollbar1.position*pi/180;
     v:=scrollbar2.position*pi/180;
     t:=0;
     bit1:=tbitmap.create;
     bit1.PixelFormat:=pf24bit;
     bit1.height:=form1.clientheight-scrollbar1.height-scrollbar1.top;
     bit1.width:=form1.clientwidth;
     bit1.canvas.brush.color:=0;
     bit1.canvas.pen.color:=$0080FF; // colour of wire frame
end;

procedure TForm1.Button1Click(Sender: TObject);
begin // Edit Code
     form2.showmodal;
end;

procedure TForm1.Timer1Timer(Sender: TObject);
var
  x,z: integer;
  ln1: tline;
  tri: triangle;
begin
     inc(t);
     if t>time1 then
        t:=-time1;
     label1.caption:='t = '+inttostr(t);
     lines:=nil;
     triangles:=nil;
     for x:=-height1 to height1 do
     begin
          ln1.p2.x:=x;
          for z:=-width1 to width1 do
          begin
               ln1.p2.y:=points[x,z,t];
               ln1.p2.z:=z;
               if z>-width1 then
                  AddLine(ln1);
               if (z>-width1)and(x>-width1) then
               begin
                    tri.p1:=ln1.p1;
                    tri.p2:=ln1.p2;
                    tri.p3.x:=tri.p1.x-1;
                    tri.p3.y:=points[x-1,z,t];
                    tri.p3.z:=tri.p2.z;
                    addtriangle(tri);
                    tri.p2.x:=tri.p3.x;
                    tri.p2.z:=tri.p1.z;
                    tri.p2.y:=points[x-1,z-1,t];
                    addtriangle(tri);
               end;
               ln1.p1:=ln1.p2;
          end;
     end;
     for z:=-width1 to width1 do
     begin
          ln1.p2.z:=z;
          for x:=-height1 to height1 do
          begin
               ln1.p2.y:=points[x,z,t];
               ln1.p2.x:=x;
               if x>-height1 then
                  AddLine(ln1);
               ln1.p1:=ln1.p2;
          end;
     end;
     UpdateDisplay;
end;

procedure TForm1.CheckBox1Click(Sender: TObject);
begin
     timer1.enabled:=not timer1.enabled;
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
     bit1.free;
     // free the bitmap so it doesn't waste memory
end;

procedure TForm1.FormResize(Sender: TObject);
begin
     bit1.height:=form1.clientheight-scrollbar1.height-scrollbar1.top;
     bit1.width:=form1.clientwidth;
     scan:=GetScanlines(bit1);
     updatedisplay;
end;

procedure TForm1.RadioGroup1Click(Sender: TObject);
begin
     updatedisplay;
end;

end.
